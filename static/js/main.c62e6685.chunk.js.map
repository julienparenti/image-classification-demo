{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","classes","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","useStyles","useState","picUrl","setPicUrl","AppBar","position","Toolbar","className","Typography","variant","Grid","container","style","height","padding","item","xs","display","alignItems","flexDirection","TextField","id","label","onChange","e","target","value","defaultValue","width","Button","onClick","console","log","getPicUrl","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAyFeA,MA1Ef,WAGI,IAWMC,EAXYC,aAAW,SAACC,GAAD,MAAY,CACtCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,MAGCK,GAdL,EAiBiBC,mBAAS,IAjB1B,mBAiBJC,EAjBI,KAiBIC,EAjBJ,KA0Bb,OAEG,qCACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACC,cAACC,EAAA,EAAD,CAASC,UAAU,YAAnB,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWhB,EAAQQ,MAA5C,mDAMD,eAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,OAAO,OAAQC,QAAQ,IAA/C,UAEH,eAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIJ,MAAO,CAACK,QAAQ,OAAOC,WAAW,SAAUC,cAAc,UAA7E,UACA,cAACC,EAAA,EAAD,CACIC,GAAG,2BACHC,MAAM,+BACNC,SAAU,SAACC,GAAD,OAAMrB,EAAUqB,EAAEC,OAAOC,QACnCC,aAAa,GACbD,MAAOxB,EACPO,QAAQ,WACRG,MAAO,CAACgB,MAAM,WAEhB,uBACA,uBACY,KAAX1B,EACK,cAAC2B,EAAA,EAAD,CAAQjB,MAAO,CAACgB,MAAM,OAAQf,OAAO,OAAQJ,QAAS,WAAWqB,QAAS,kBAhCnE,SAAC5B,GAEd,OADA6B,QAAQC,IAAI9B,GACLA,EA8B6E+B,CAAU/B,IAAxF,6BACN,6BACY,KAAXA,EACD,qBACIgC,IAAKhC,IAET,gCAEF,eAACQ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAK,GAAIJ,MAAO,CAACK,QAAQ,OAAQC,WAAW,SAAUC,cAAc,UAA/E,UACJ,uBACF,cAACX,EAAA,EAAD,CAAYC,QAAQ,KAApB,kBACA,iCClEe0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c62e6685.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n  TextField,\n  Grid,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Button\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\nfunction App() {\n\n    // Styles settings\n    const useStyles = makeStyles((theme) => ({\n       root: {\n         flexGrow: 1,\n       },\n       menuButton: {\n         marginRight: theme.spacing(2),\n       },\n       title: {\n         flexGrow: 1,\n       },\n     }));\n    const classes = useStyles();\n\n    // Params\n    const [picUrl, setPicUrl] = useState(\"\");\n\n    // Functions\n    const getPicUrl =(picUrl) => {\n        console.log(picUrl)\n        return picUrl\n    }\n\n\n  return (\n\n     <>\n       <AppBar position=\"static\">\n        <Toolbar className='myToolbar'>\n          <Typography variant=\"h6\" className={classes.title}>\n            Demo - Image Categorization Model\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n         <Grid container style={{height:\"90vh\", padding:50}}>\n\n      <Grid item xs={12} style={{display:\"flex\",alignItems:\"center\", flexDirection:\"column\"}}>\n      <TextField\n          id=\"standard-read-only-input\"\n          label=\"Enter the picture's url here\"\n          onChange={(e)=> setPicUrl(e.target.value)}\n          defaultValue=\"\"\n          value={picUrl}\n          variant=\"outlined\"\n          style={{width:\"100vh\"}}\n        />\n        <br/>\n        <br/>\n        {picUrl !== \"\" ?\n              <Button style={{width:\"20vh\", height:\"5vh\"}} variant= \"outlined\" onClick={()=>getPicUrl(picUrl)}>Detect category</Button>\n      : <></>}\n        {picUrl !== \"\" ?\n        <img\n            src={picUrl}\n        />\n      : <></>}\n      </Grid>\n      <Grid item xs ={12} style={{display:\"flex\", alignItems:\"center\", flexDirection:'column'}}>\n  <br/>\n<Typography variant=\"h5\">Text</Typography>\n<br/>\n\n</Grid>\n      </Grid>\n\n     </>\n\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}