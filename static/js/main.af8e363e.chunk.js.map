{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","classes","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","palette","primary","main","useStyles","AppBar","position","Toolbar","className","Typography","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAAe,I,4CCkMAA,MA3Kf,WACI,IAgBMC,EAhBYC,aAAW,SAACC,GAAD,MAAY,CACtCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,GAEZK,QAAS,CACPC,QAAS,CACNC,KAAM,eAIEC,GAuIlB,OAEG,qCACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACC,cAACC,EAAA,EAAD,CAASC,UAAU,YAAnB,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWhB,EAAQQ,MAAOW,MAAM,UAAzD,mDAML,iCC9KUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.af8e363e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import * as tf from '@tensorflow/tfjs';\n//import {loadGraphModel} from '@tensorflow/tfjs-converter';\n//import padSequences from './helper/paddedSeq';\nimport {\n  TextField,\n  Grid,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Button\n\n\n} from '@material-ui/core'\n//import MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n//import { blue } from '@material-ui/core/colors';\n\n\n\nfunction App() {\n    const useStyles = makeStyles((theme) => ({\n       root: {\n         flexGrow: 1,\n       },\n       menuButton: {\n         marginRight: theme.spacing(2),\n       },\n       title: {\n         flexGrow: 1,\n       },\n       palette: {\n         primary: {\n            main: '#0f7aca',\n    },\n  },\n     }));\n    const classes = useStyles();\n\n// Params\n// const urlNewModel = {\n//     model: 'https://tmp-for-tensorflow-js.s3.eu-central-1.amazonaws.com/model/model.json',\n//     word_index: 'https://tmp-for-tensorflow-js.s3.eu-central-1.amazonaws.com/model/word_index.json'}\n// const OOV_INDEX = 2;\n// const INDEX_FROM = 0;\n// const VOCAB_SIZE = 50000;\n// const MAX_LEN = 200;\n//\n// // const handler = useState();\n// const [metadata, setMetadata] = useState();\n// const [model, setModel] = useState();\n// const [testText, setText] = useState(\"\");\n// const [testScore, setScore] = useState(\"\");\n// const [testCategory, setCategory] = useState(\"\");\n// const [trimedText, setTrim] = useState(\"\")\n// const [seqText, setSeq] = useState(\"\")\n// const [padText, setPad] = useState(\"\")\n// const [inputText, setInput] = useState(\"\")\n//\n// // Get the index with the max value in array\n// function indexOfMax(arr) {\n//     if (arr.length === 0) {\n//         return -1;\n//     }\n//\n//     var max = arr[0];\n//     var maxIndex = 0;\n//\n//     for (var i = 1; i < arr.length; i++) {\n//         if (arr[i] > max) {\n//             maxIndex = i;\n//             max = arr[i];\n//         }\n//     }\n//\n//     return maxIndex;\n// }\n//\n// // Load categorization model\n// async function loadNewModel(urlNewModel) {\n//   try {\n//     const model = await tf.loadLayersModel(urlNewModel.model);\n//     setModel(model);\n//     console.log('Load new model - worked');\n//   } catch (err) {\n//     console.log(err);\n//     console.log('Load new model - not worked');\n//   }\n// }\n//\n// // Load WordIndex\n// async function loadWordIndex(urlNewModel) {\n//   try {\n//     const metadataJson = await fetch(urlNewModel.word_index);\n//     const metadata = await metadataJson.json();\n//     setMetadata(metadata);\n//     console.log('Load wordIndex - worked');\n//     console.log(metadata);\n//   } catch (err) {\n//     console.log(err);\n//     console.log('Load wordIndex - not worked');\n//   }\n// }\n//\n// // Apply function\n// const getCategoryScore =(text) => {\n//\n//   // Start time\n//   var start = Date.now();\n//   console.log(start);\n//\n//   // Dictionary\n//   var dictCategories = {0:\"Medical\",\n//                         1:\"Chirurgical\",\n//                         2:\"Gynecological\",\n//                         3:\"Allergy\",\n//                         4:\"Lifestyle\"};\n//   // Text Cleaning\n//   console.log('Text :', text)\n//   const inputText = text.trim().toLowerCase().replace(/(\\.|\\,|\\!)/g, '').split(' ');\n//   setTrim(inputText)\n//\n//   // Tokenizer\n//   console.log('Text cleaning :', inputText)\n//   const sequence = inputText.map(word => {\n//     let wordIndex = metadata[word] + INDEX_FROM;\n//     if (wordIndex > VOCAB_SIZE) {\n//       wordIndex = OOV_INDEX;\n//     }\n//     return wordIndex;\n//   });\n//   setSeq(sequence)\n//   console.log('Words sequence :',sequence)\n//\n//   // Truncation and padding\n//   const paddedSequence = padSequences([sequence], MAX_LEN);\n//   setPad(paddedSequence)\n//\n//   // Predict\n//   const input = tf.tensor2d(paddedSequence, [1, MAX_LEN]);\n//   console.log('Tensor :',input)\n//   setInput(input)\n//   const predictOut = model.predict(input);\n//   console.log('Probabilities :',predictOut.dataSync())\n//   const maxCategory = indexOfMax(predictOut.dataSync());\n//   const score = predictOut.dataSync()[maxCategory];\n//   console.log('Best score :',score);\n//   const category = dictCategories[maxCategory];\n//   console.log('Best category :', category);\n//   predictOut.dispose();\n//   setScore(score);\n//   setCategory(category);\n//\n//   // End time\n//   var end = Date.now();\n//   const time = end-start;\n//   console.log('Response time :', time);\n//\n//   return score;\n// }\n//\n//\n// useEffect(()=>{\n//   tf.ready().then(\n//     ()=>{\n//       loadNewModel(urlNewModel)\n//       loadWordIndex(urlNewModel)\n//     }\n//  );\n\n//,[])\n\n  return (\n\n     <>\n       <AppBar position=\"static\">\n        <Toolbar className='myToolbar'>\n          <Typography variant=\"h6\" className={classes.title} color=\"primary\">\n            Demo - Image Categorization Model\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n     <></>\n\n\n     </>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}